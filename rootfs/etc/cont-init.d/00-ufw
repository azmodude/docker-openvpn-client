#!/usr/bin/with-contenv /bin/bash

# Completely lock down a container/host using ufw.
# By default deny everything and allow only outbound ips and ports read from
# .ovpn configurations.
# Traffic in/out to/from tunnel interface and/or explicitely defined
# networks is allowed to pass.

# declare associative array
declare -A ovpn_servers

# sets $OPENVPN_PHYSICAL_INTERFACE (the eth interface of the openvpn-client)
source /bin/determine-openvpn-network-interface

OPENVPN_NETWORK_GATEWAY=$(ipcalc ${OPENVPN_DOCKER_NETWORK} -n -b | grep HostMin | \
    cut -d':' -f 2 | awk '{$1=$1;print}') # final awks trims whitespace
>&2 echo "Setting ${OPENVPN_NETWORK_GATEWAY} as default gateway"
ip route del default
ip route add default via ${OPENVPN_NETWORK_GATEWAY} dev $OPENVPN_PHYSICAL_INTERFACE

# deny everything by default
ufw default deny outgoing
ufw default deny incoming

# use here string because anything in command | while read is executed in a sub-shell
# therefore variables modified in the loop are discarded
while read -r ovpn_remote; do
    remote=$(echo "${ovpn_remote}" | cut -d ' ' -f 2)
    port=$(echo "${ovpn_remote}" | cut -d ' ' -f 3)
    [[ -n "${remote}" ]] && [[ -n "${port}" ]] && ovpn_servers["${remote}"]="${port}"
done <<< $(find /etc/openvpn/config -name "*.ovpn" \
    -exec grep -Eh "remote [0-9]+\." {} \;)

# allow traffic in and out to remotes
for ovpn_remote in "${!ovpn_servers[@]}"; do
    port=${ovpn_servers[$ovpn_remote]}
    ufw allow in on "${OPENVPN_PHYSICAL_INTERFACE}" from "${ovpn_remote}" to any
    ufw allow out on "${OPENVPN_PHYSICAL_INTERFACE}" to "${ovpn_remote}" port 443
done
# also allow anything on tunnel interface
ufw allow in on "${OPENVPN_NETWORK_INTERFACE}" from 0.0.0.0/0 to any
ufw allow out on "${OPENVPN_NETWORK_INTERFACE}" from any to 0.0.0.0/0

# allow communication on the docker network
ufw allow from "${OPENVPN_DOCKER_NETWORK}"
# allow additional networks
for allowed_range in ${OPENVPN_ALLOWED_EXTERNAL_NETWORKS} ${OPENVPN_ALLOWED_DOCKER_NETWORKS}; do
    # check if we are routing over a docker network to correctly set interface
    # for ufw to allow
    GATEWAY=$(ipcalc ${allowed_range} -n -b | grep HostMin | \
    cut -d':' -f 2 | awk '{$1=$1;print}') # final awks trims whitespace
    DIRECTLY_CONNECTED_INTERFACE=$(ip -o route get ${GATEWAY} | \
        awk '{print $3}')
    if [[ "${DIRECTLY_CONNECTED_INTERFACE}" =~ 'eth' ]]; then
        ALLOWED_INTERFACE=${DIRECTLY_CONNECTED_INTERFACE}
    else
        ALLOWED_INTERFACE=${OPENVPN_PHYSICAL_INTERFACE}
    fi
    ufw allow in on "${ALLOWED_INTERFACE}" from "${allowed_range}" to any
    for allowed_range_out in ${OPENVPN_ALLOWED_EXTERNAL_NETWORKS} ${OPENVPN_ALLOWED_DOCKER_NETWORKS}; do
        ufw allow out on "${ALLOWED_INTERFACE}" to "${allowed_range_out}"
    done
done

ufw enable
ufw status verbose
